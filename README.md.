# ipv8
The IPv8 address is based on the IPv4 / IPv6 address, adding 2 bytes to express the topological relationship of the network and the double-layer P2Plus gateway node. P2Plus will establish a decentralized fast, safe, and private point-to-point on the IP layer Communications network.
IPv8 Documentation
Welcome to the IPv8 documentation! This file will help you navigate the existing documentation. The documentation will explain the concepts behind IPv8, the architecture, and guide you through making your first overlay.

Why does IPv8 exist?
Problems with the very fabric of The Internet, IPv4, are mounting. The approach of IPv6, Mobile IP, and IPSec is hampered by fundamental architectural problems. One solution is moving the intelligence up to a higher layer in the protocol stack and towards the end points. Our endpoints are not dependent on any central infrastructure. Our architecture is academically pure and fully decentralized; to the point of obsession. IPv8 is based on the principle of self-governance. Like Bitcoin and BitTorrent our IPv8 overlays are permissionless and requires no server upkeep costs.

IPv8 aims to help restore the original Internet; for free; owned by nobody; for everyone.

IPv8 Features
IPv8 is a networking layer which offers identities, communication with some robustness, and provides hooks for higher layers. For instance, our Internet-deployed reputation functions and ledger-based storage of reputation data. IPv8 is designed as a mechanism to build trust. Each network overlay offers network connections to known digital identities through public keys. Overlays are robust against several network problems and security issues. Using a custom NAT-traversing DHT to find the current IPv4 network address, IPv8 keeps the network connectivity going, even as the IPv4 addresses change. Each network overlay keeps track of a number of neighbors and occasionally checks if they are still responsive.

IPv8 offers global connectivity through integrated UDP NAT puncturing, announcement of your identity claim and a web-of-trust. IPv8 has an integrated attestation service. You can use IPv8 for official verification that something is true or authentic, according to a trustworthy attestor. By using zero-knowledge proofs we attempt to minimize privacy leakage.

The science behind IPv8
IPv8 was built through years of experience and was shaped by science. Some key publications are:

Halkes G, Pouwelse J. UDP NAT and Firewall Puncturing in the Wild. In International Conference on Research in Networking 2011 May 9 (pp. 1-12). Springer, Berlin, Heidelberg.

Zeilemaker N, Schoon B, Pouwelse J. Dispersy bundle synchronization. TU Delft, Parallel and Distributed Systems. 2013 Jan.

IPv8 Example
IPv8 is a tool to build interesting distributed applications. IPv8 overlays can be used to offer various services for your application. Our flagship application Tribler, for example, uses seven IPv8 overlays for serverless discovery. Tribler’s services range from DHT-based lookup, Tor-inspired privacy to a completely decentralised marketplace for bandwidth. If we take a look at Tribler’s debug screen, it shows IPv8 in action: you can observe statistics such as active neighbors and utilized network traffic to make sure you have made a healthy overlay.

A screenshot of Tribler's IPv8 statistics
Getting help
If you spotted an inconsistency in the documentation or found a bug, please let us know in a GitHub issue.

Table of contents
Preliminaries:

Installing Libsodium (Windows and MacOS only)
Windows
MacOS
Basics:

Creating your first overlay
Files
Running the IPv8 service
Running two IPv8 services
Loading a custom overlay
Printing the known peers
Adding messages
Storing states in IPv8
When you need a state
The hard way
The easier way
Unit Testing Overlays
Files
Why and How?
Deadlock Detection
Creating Instances
Communication
Piggybacking on Introductions
Using the RequestCache
Fragile Packet Handling
Temporary Files
Shortcut Reference
Task Management
What is a task?
The TaskManager
Network IO and the DiscoveryStrategy
The DiscoveryStrategy
Using a DiscoveryStrategy
Using the IPv8 attestation service
Files
Running the IPv8 service
Functionality flows
References:

Peer discovery basics
Community Best Practices
SOLID by example
Community initialization
IPv8 configuration options
Overlay Specifications
Key Specifications
IPv8 bootstrapping
Bootstrap servers (rendezvous nodes)
UDP broadcasts
Making your own Bootstrapper
Key generation options
Message serialization
Datatypes
The ez_pack family for Community classes
Simulations:

Running simulations with IPv8
Code Example
Using the Bootstrap Server
Further reading:

Advanced attestation service usage
Enabling anonymization
Setting a REST API key
Using a REST API X509 certificate
Setting a rendezvous token
TunnelCommunity
Interface
Hidden services
TunnelSettings
Deprecated/Archive:

Attestation Prototype Documentation
Passive Updates in the IPv8 Android Application:
Flow of Communication in Active Attestation Requests:
Peers and their REST APIs:
Attestation Process: Detailed Explanation
Annex: General Notes on Demo Classes
Using the IPv8 attestation service
Files
Running the IPv8 service
Functionality flows
